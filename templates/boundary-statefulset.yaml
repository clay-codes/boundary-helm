apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: boundary-controller
  labels:
    app: boundary-controller
spec:
  serviceName: boundary-controller
  replicas: {{ .Values.boundary.replicas }}
  selector:
    matchLabels:
      app: boundary-controller
  template:
    metadata:
      labels:
        app: boundary-controller
      annotations:
      {{- toYaml .Values.boundary.podAnnotations | nindent 8 }} 
    spec:
      volumes:
      - name: boundary-cm
        configMap:
          name: boundary-cm
      - name: boundary-config
        emptyDir: {}
      {{- if not .Values.boundary.setup.dev}}
      initContainers:
      - name: boundary-init
        env:
        - name: BOUNDARY_PG_URL
          value: "postgresql://{{ .Values.postgres.env.postgresUsr }}:{{ .Values.postgres.env.postgresPswd }}@postgres-boundary:5432/boundary?sslmode=disable"
        - name: HOSTNAME
          value: "boundary"
        {{ if .Values.boundary.image.licenseSecretName }}
        - name: BOUNDARY_LICENSE
          valueFrom:
            secretKeyRef:
              name: {{ default "boundary-license" .Values.boundary.image.licenseSecretName }}
              key: {{ default "license" .Values.boundary.image.licenseSecretKey }}
        {{ end }}
        {{ if .Values.boundary.image.licenseSecretName }}
        {{ if or (eq .Values.boundary.image.tag "latest") (hasSuffix "-ent" .Values.boundary.image.tag) }}
        image: "{{ .Values.boundary.image.repository }}-enterprise:{{ .Values.boundary.image.tag }}"
        {{ else }}
        image: "{{ .Values.boundary.image.repository }}-enterprise:{{ .Values.boundary.image.tag }}-ent"
        {{ end }}
        {{ else }}
        image: "{{ .Values.boundary.image.repository }}:{{ trimSuffix "-ent" .Values.boundary.image.tag }}"
        {{ end }}
        imagePullPolicy: {{ .Values.boundary.image.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - |
            # Copy the configuration file from immutable to writable location
            cat /immutable-config/config.hcl > /boundary/config.hcl
            chmod 644 /boundary/config.hcl
            
            # wait for pg pod
            sleep 10
            
            # Run the boundary command with appropriate arguments
            boundary database \
            {{- if .Values.boundary.setup.migrateDB }}
              migrate \
            {{- else }}
              init \
              {{- if not .Values.boundary.setup.withResources }}
                -skip-auth-method-creation \
                -skip-host-resources-creation \
                -skip-scopes-creation \
                -skip-target-creation \
                -skip-initial-login-role-creation \
              {{- end }}
            {{- end }}
            -config /boundary/config.hcl
        volumeMounts:
        - name: boundary-cm
          mountPath: "/immutable-config/"
        - name: boundary-config
          mountPath: "/boundary"
      {{- end }}
      containers:
      - name: boundary
        {{ if .Values.boundary.image.licenseSecretName }}
        {{ if or (eq .Values.boundary.image.tag "latest") (hasSuffix "-ent" .Values.boundary.image.tag) }}
        image: "{{ .Values.boundary.image.repository }}-enterprise:{{ .Values.boundary.image.tag }}"
        {{ else }}
        image: "{{ .Values.boundary.image.repository }}-enterprise:{{ .Values.boundary.image.tag }}-ent"
        {{ end }}
        {{ else }}
        image: "{{ .Values.boundary.image.repository }}:{{ trimSuffix "-ent" .Values.boundary.image.tag }}"
        {{ end }}
        imagePullPolicy: {{ .Values.boundary.image.pullPolicy }}
        env:
        - name: BOUNDARY_PG_URL
          value: "postgresql://{{ .Values.postgres.env.postgresUsr }}:{{ .Values.postgres.env.postgresPswd }}@postgres-boundary:5432/{{ .Values.postgres.env.postgresDB }}?sslmode=disable"
        - name: HOSTNAME
          value: "boundary"
        {{ if .Values.boundary.image.licenseSecretName }}
        - name: BOUNDARY_LICENSE
          valueFrom:
            secretKeyRef:
              name: {{ default "boundary-license" .Values.boundary.image.licenseSecretName }}
              key: {{ default "license" .Values.boundary.image.licenseSecretKey }}
        {{ end }}
        args:
          {{- if .Values.boundary.setup.dev}}
          - "dev"
          - "-database-url"
          - "env://BOUNDARY_PG_URL"
          {{- else }}
          - "server"
          - "-config"
          - "/boundary/config.hcl"
        volumeMounts:
        - name: boundary-config
          mountPath: "/boundary"
        {{- end }}
        ports:
        - containerPort: 9200
        - containerPort: 9201
        - containerPort: 9203
        livenessProbe:
          {{- toYaml .Values.boundary.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.boundary.readinessProbe | nindent 10 }}
