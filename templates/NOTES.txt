Boundary controller installed!

{{- if .Values.boundary.ingress.enabled }}
{{- range $host := .Values.boundary.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.boundary.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.boundary.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "boundary.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.boundary.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "boundary.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "boundary.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.boundary.service.port }}
{{- else if contains "ClusterIP" .Values.boundary.service.type }}
{{- if .Values.boundary.setup.dev }}

UI ready! port forward boundary pod @ 9200 and navigate browser to http://127.0.0.1:9200

kubectl --namespace {{ .Release.Namespace }} port-forward boundary-0 9200:9200
{{- else }}
Must setup org user and auth method to access boundary UI
  
then, run this port forward command, and navigate browser to http://127.0.0.1:9200

kubectl --namespace {{ .Release.Namespace }} port-forward boundary-0 9200:9200
{{- end }}
{{- end }}
